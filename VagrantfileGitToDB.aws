# -*- mode: ruby -*-
# vi: set ft=ruby :

# this Vagrantfile can be used to provision an AWS ubuntu/trusty instance which can then
# be used to create an instance for further dev use

# on first use install the aws provider plugin for vagrant:
# vagrant plugin install vagrant-aws
# then add the "dummy" box which is reference below:
# vagrant box add dummy https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box

# the block device mapping may need to be adjusted when upgrading the Debian image
# use the following to see what the name of the root dev is in the new image:\
#
#    aws ec2 describe-images --image-ids ami-b14ba7a7 --query 'Images[].RootDeviceName'

# in ~/.profile or equiv add so credentials are available below. This assumes awscli setup.
# export AWS_ACCESS_KEY_ID=`grep "aws_access_key_id" ~/.aws/credentials | awk -F " = " '{print $2}'`
# export AWS_SECRET_ACCESS_KEY=`grep "aws_secret_access_key" ~/.aws/credentials | awk -F " = " '{print $2}'`

# now use
# vagrant up --provider=aws

Vagrant.configure(2) do |config|

  require 'fileutils'
  if(ENV['BUDA_PROPS'])
    FileUtils.cp_r( ENV['BUDA_PROPS'] , "conf/shared/etc/buda" )
  else
    puts("BUDA_PROPS env variable is not set : using default configuration !")
  end
  
  config.vm.hostname = "buda1"

  config.vm.box = "aws-dummy"
  
  # try to use rsync instead of default smb
  config.vm.synced_folder ".", "/vagrant", type: "rsync",
    rsync__exclude: [ "dataDisk.vdi", ".git", ".gitignore", ".DS_Store", ".project" ],
    rsync__verbose: true
  
  
  config.vm.provider :aws do |aws, override|
    # credentials for accessing AWS to perform a launch
    aws.access_key_id = ENV[ 'AWS_ACCESS_KEY_ID' ]
    aws.secret_access_key = ENV[ 'AWS_SECRET_ACCESS_KEY' ]
    
    aws.keypair_name = "BDRC_Dev_001"
    aws.security_groups = [ 'BDRC_Dev_SG_001' ]
    # debian-stretch-hvm-x86_64-gp2-2018-01-06-16218 - ami-628ad918
    # debian-stretch-hvm-x86_64-gp2-2018-10-01-66564 - ami-03006931f694ea7eb
    aws.ami = "ami-03006931f694ea7eb"
    aws.instance_type = "m5.xlarge"
# use:  aws ec2 describe-images --image-ids ami-03006931f694ea7eb    - substitute the aws.ami value
# to determine exactly what the DeviceName needs to be
# if the describe says xvda use that. If it says /dev/xvda use that
    aws.block_device_mapping = [{ 'DeviceName' => 'xvda', 
                                  'Ebs.VolumeSize' => 32, 
                                  'Ebs.VolumeType' => 'gp2' }]

	override.nfs.functional = false
    override.ssh.username = "admin"
    override.ssh.private_key_path = "/usr/local/BUDA_TECH/BDRC_Dev_001.pem"
  end
  
  config.vm.provision "open-jdk", type: "shell", path: "scripts/open-jdk.sh"
  config.vm.provision "tools", type: "shell", path: "scripts/tools.sh"
# after all other provisioning the final step is to change the ssh port
# to something other than 22 - make sure this is the last step since
# vagrant only knows how to work on port 22
  config.vm.provision "set-ssh-port", type: "shell", path: "scripts/aws-debian.sh"
end
