# Fuseki configuration for BDRC, configures two endpoints:
#   - /bdrc is read-only
#   - /bdrcrw is read-write
#
# This was painful to come up with but the web interface basically allows no option
# and there is no subclass inference by default so such a configuration file is necessary.
#
# The main doc sources are:
#  - https://jena.apache.org/documentation/serving_data/  -- fuseki:Server, fuseki:services
#  - https://jena.apache.org/documentation/fuseki2/fuseki-configuration.html
#  - http://baach.de/Members/jhb/getting-started-with-jena-fuseki-and-owl-reasoning
#  - https://jena.apache.org/documentation/assembler/assembler-howto.html
#  - https://jena.apache.org/documentation/assembler/assembler.ttl
#
# See https://jena.apache.org/documentation/fuseki2/fuseki-layout.html for the destination of this file.

@prefix fuseki:  <http://jena.apache.org/fuseki#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix tdb:     <http://jena.hpl.hp.com/2008/tdb#> .
@prefix ja:      <http://jena.hpl.hp.com/2005/11/Assembler#> .
@prefix :        <http://base/#> .

[] rdf:type fuseki:Server ;
   fuseki:services (
     :<%= ENV['EP_NAME'] %>rw
     :<%= ENV['EP_NAME'] %>ro
   ) .

# the r/w endpoint is used to load TDB with the base graph
:<%= ENV['EP_NAME'] %>rw rdf:type fuseki:Service ;
    fuseki:name                       "<%= ENV['EP_NAME'] %>rw" ;     # name of the dataset in the url
    fuseki:serviceQuery               "query" ;    # SPARQL query service
    fuseki:serviceUpload              "upload" ;   # Non-SPARQL upload service
    fuseki:serviceReadWriteGraphStore "data" ;     # SPARQL Graph store protocol (read and write)
    fuseki:dataset                    :tdbDataset_<%= ENV['EP_NAME'] %> ;
    .

# the r/o endpoint is for querying and should include in memory inferred triples
:<%= ENV['EP_NAME'] %>ro rdf:type fuseki:Service ;
    fuseki:name                     "<%= ENV['EP_NAME'] %>" ;
    fuseki:serviceQuery             "query" ;
    fuseki:serviceReadGraphStore    "data" ;
    fuseki:dataset                  :dataset_<%= ENV['EP_NAME'] %> ;
    .

:dataset_<%= ENV['EP_NAME'] %> rdf:type       ja:RDFDataset ;
    ja:defaultGraph          :model_inf_<%= ENV['EP_NAME'] %> ;
    tdb:unionDefaultGraph true ;
    .

:model_inf_<%= ENV['EP_NAME'] %> a ja:OntModel ;
     ja:baseModel :tdbGraph_<%= ENV['EP_NAME'] %> ;
     ja:prefixMapping :pm_<%= ENV['EP_NAME'] %> ;
     ja:reasoner [
        ja:reasonerURL <http://jena.hpl.hp.com/2003/OWLFBRuleReasoner>
     ] .

:tdbGraph_<%= ENV['EP_NAME'] %> rdf:type tdb:GraphTDB ;
    tdb:dataset :tdbDataset_<%= ENV['EP_NAME'] %> ;
    .

:tdbDataset_<%= ENV['EP_NAME'] %> rdf:type tdb:DatasetTDB ;
    tdb:location "/etc/fuseki/databases/<%= ENV['EP_NAME'] %>" ;
    # If the unionDefaultGraph is used, then the "update" service should be removed.
    tdb:unionDefaultGraph true ;
    .

# These prefix mappings don't seem to do anything...

:pm_<%= ENV['EP_NAME'] %> rdf:type ja:PrefixMapping ;
    ja:includes :pm0_<%= ENV['EP_NAME'] %> ;
    ja:includes :pm1_<%= ENV['EP_NAME'] %> ;
    ja:includes :pm2_<%= ENV['EP_NAME'] %> ;
    ja:includes :pm3_<%= ENV['EP_NAME'] %> ;
    ja:includes :pm4_<%= ENV['EP_NAME'] %> ;
    ja:includes :pm5_<%= ENV['EP_NAME'] %> ;
    ja:includes :pm6_<%= ENV['EP_NAME'] %> ;
    ja:includes :pm7_<%= ENV['EP_NAME'] %> ;
    ja:includes :pm8_<%= ENV['EP_NAME'] %> ;
    ja:includes :pm9_<%= ENV['EP_NAME'] %> ;
    ja:includes :pm10_<%= ENV['EP_NAME'] %> ;
    ja:includes :pm11_<%= ENV['EP_NAME'] %> ;
    .

:pm0_<%= ENV['EP_NAME'] %> rdf:type ja:SinglePrefixMapping; 
    ja:prefix ''; 
    ja:namespace 'http://purl.bdrc.io/ontology/root/' ;
    .

:pm1_<%= ENV['EP_NAME'] %> rdf:type ja:SinglePrefixMapping; 
    ja:prefix 'crp'; 
    ja:namespace 'http://purl.bdrc.io/ontology/corporation#' ;
    .

:pm2_<%= ENV['EP_NAME'] %> rdf:type ja:SinglePrefixMapping; 
    ja:prefix 'prd'; 
    ja:namespace 'http://purl.bdrc.io/ontology/product#' ;
    .

:pm3_<%= ENV['EP_NAME'] %> rdf:type ja:SinglePrefixMapping; 
    ja:prefix 'out'; 
    ja:namespace 'http://purl.bdrc.io/ontology/outline#' ;
    .

:pm4_<%= ENV['EP_NAME'] %> rdf:type ja:SinglePrefixMapping; 
    ja:prefix 'plc'; 
    ja:namespace 'http://purl.bdrc.io/ontology/place#' ;
    .

:pm5_<%= ENV['EP_NAME'] %> rdf:type ja:SinglePrefixMapping; 
    ja:prefix 'ofc'; 
    ja:namespace 'http://purl.bdrc.io/ontology/office#' ;
    .

:pm6_<%= ENV['EP_NAME'] %> rdf:type ja:SinglePrefixMapping; 
    ja:prefix 'lin'; 
    ja:namespace 'http://purl.bdrc.io/ontology/lineage#' ;
    .

:pm7_<%= ENV['EP_NAME'] %> rdf:type ja:SinglePrefixMapping; 
    ja:prefix 'top'; 
    ja:namespace 'http://purl.bdrc.io/ontology/topic#' ;
    .

:pm8_<%= ENV['EP_NAME'] %> rdf:type ja:SinglePrefixMapping; 
    ja:prefix 'wor'; 
    ja:namespace 'http://purl.bdrc.io/ontology/work#' ;
    .

:pm9_<%= ENV['EP_NAME'] %> rdf:type ja:SinglePrefixMapping; 
    ja:prefix 'vol'; 
    ja:namespace 'http://purl.bdrc.io/ontology/volumes#' ;
    .

:pm10_<%= ENV['EP_NAME'] %> rdf:type ja:SinglePrefixMapping; 
    ja:prefix 'desc'; 
    ja:namespace 'http://onto.bdrc.io/ontology/description#' ;
    .

:pm11_<%= ENV['EP_NAME'] %> rdf:type ja:SinglePrefixMapping; 
    ja:prefix 'per'; 
    ja:namespace 'http://purl.bdrc.io/ontology/person#' ;
    .