# Fuseki configuration for BDRC, configures two endpoints:
#   - /<%= ENV['EP_NAME'] %> is read-only
#   - /<%= ENV['EP_NAME'] %>rw is read-write
#
# This was painful to come up with but the web interface basically allows no option
# and there is no subclass inference by default so such a configuration file is necessary.
#
# The main doc sources are:
#  - https://jena.apache.org/documentation/fuseki2/fuseki-configuration.html
#  - https://jena.apache.org/documentation/assembler/assembler-howto.html
#  - https://jena.apache.org/documentation/assembler/assembler.ttl
#
# See https://jena.apache.org/documentation/fuseki2/fuseki-layout.html for the destination of this file.

@prefix fuseki:  <http://jena.apache.org/fuseki#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix tdb:     <http://jena.hpl.hp.com/2008/tdb#> .
@prefix tdb2:    <http://jena.apache.org/2016/tdb#> .
@prefix ja:      <http://jena.hpl.hp.com/2005/11/Assembler#> .
@prefix :        <http://base/#> .
@prefix text:    <http://jena.apache.org/text#> .
@prefix per:     <http://purl.bdrc.io/ontology/person#> .
@prefix root:    <http://purl.bdrc.io/ontology/root#> .
@prefix out:     <http://purl.bdrc.io/ontology/outline#> .

[] ja:loadClass "org.seaborne.tdb2.TDB2" .
tdb2:DatasetTDB2  rdfs:subClassOf  ja:RDFDataset .
tdb2:GraphTDB2    rdfs:subClassOf  ja:Model .

[] rdf:type fuseki:Server ;
   fuseki:services (
     :<%= ENV['EP_NAME'] %>rw
     :<%= ENV['EP_NAME'] %>ro
   ) .

:<%= ENV['EP_NAME'] %>rw rdf:type fuseki:Service ;
    fuseki:name                       "<%= ENV['EP_NAME'] %>rw" ;     # name of the dataset in the url
    fuseki:serviceQuery               "query" ;    # SPARQL query service
    fuseki:serviceUpload              "upload" ;   # Non-SPARQL upload service
    fuseki:serviceReadWriteGraphStore "data" ;     # SPARQL Graph store protocol (read and write)
    fuseki:dataset                    :<%= ENV['EP_NAME'] %>_text_dataset ;
    .

:<%= ENV['EP_NAME'] %>ro rdf:type fuseki:Service ;
    fuseki:name                     "<%= ENV['EP_NAME'] %>" ;
    fuseki:serviceQuery             "query" ;
    fuseki:serviceReadGraphStore    "data" ;
    fuseki:dataset           		:<%= ENV['EP_NAME'] %>_text_dataset ;
    .

# # using TDB
# :dataset_<%= ENV['EP_NAME'] %> rdf:type      tdb:DatasetTDB ;
#      tdb:location "/etc/fuseki/databases/<%= ENV['EP_NAME'] %>" ;
#      tdb:unionDefaultGraph true ;
#      .

# try using TDB2
:dataset_<%= ENV['EP_NAME'] %> rdf:type      tdb2:DatasetTDB2 ;
     tdb2:location "/etc/fuseki/databases/<%= ENV['EP_NAME'] %>" ;
     tdb2:unionDefaultGraph true ;
    .

:<%= ENV['EP_NAME'] %>_text_dataset rdf:type     text:TextDataset ;
    text:dataset   :dataset_<%= ENV['EP_NAME'] %> ;
    text:index     :<%= ENV['EP_NAME'] %>_lucene_index ;
    .

# Text index description
:<%= ENV['EP_NAME'] %>_lucene_index a text:TextIndexLucene ;
    text:directory <file:/etc/fuseki/lucene-<%= ENV['EP_NAME'] %>> ;
    text:storeValues true ;
    text:entityMap :<%= ENV['EP_NAME'] %>_entmap ;
    .

# Mapping in the index
# URI stored in field "uri"
# rdfs:label is mapped to field "text"
:<%= ENV['EP_NAME'] %>_entmap a text:EntityMap ;
    text:entityField      "uri" ;
    text:uidField         "uid" ;
    text:defaultField     "label" ;
    text:langField        "lang" ;
#    text:graphField       "graph" ; ## enable graph-specific indexing
    text:map (
         [ text:field "label" ; 
           text:predicate rdfs:label ;
           text:analyzer [
               a text:StandardAnalyzer ;
               text:stopWords ("a" "an" "and" "but") ] ; ]
         [ text:field "name" ; 
           text:predicate root:name ; ]
         [ text:field "pername" ;
           text:predicate per:name ; ]
         [ text:field "perPrimaryName" ;
           text:predicate per:primaryName ; ]
         [ text:field "perCommonName" ;
           text:predicate per:commonName ; ]
         [ text:field "perPersonalName" ;
           text:predicate per:personalName ; ]
         [ text:field "colophon" ; 
           text:predicate out:colophon ; ]
         ) ;
    .
    