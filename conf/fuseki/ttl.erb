# Fuseki configuration for BDRC, configures two endpoints:
#   - /<%= ENV['EP_NAME'] %> is read-only
#   - /<%= ENV['EP_NAME'] %>rw is read-write
#
# This was painful to come up with but the web interface basically allows no option
# and there is no subclass inference by default so such a configuration file is necessary.
#
# The main doc sources are:
#  - https://jena.apache.org/documentation/fuseki2/fuseki-configuration.html
#  - https://jena.apache.org/documentation/assembler/assembler-howto.html
#  - https://jena.apache.org/documentation/assembler/assembler.ttl
#
# See https://jena.apache.org/documentation/fuseki2/fuseki-layout.html for the destination of this file.

@prefix fuseki:  <http://jena.apache.org/fuseki#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix tdb:     <http://jena.hpl.hp.com/2008/tdb#> .
# @prefix tdb2:    <http://jena.apache.org/2016/tdb#> .
@prefix ja:      <http://jena.hpl.hp.com/2005/11/Assembler#> .
@prefix :        <http://base/#> .
@prefix text:    <http://jena.apache.org/text#> .
@prefix skos:    <http://www.w3.org/2004/02/skos/core#> .
@prefix adm:     <http://purl.bdrc.io/ontology/admin/> .
@prefix bdd:     <http://purl.bdrc.io/data/> .
@prefix bdo:     <http://purl.bdrc.io/ontology/core/> .
@prefix bdr:     <http://purl.bdrc.io/resource/> .

# [] ja:loadClass "org.seaborne.tdb2.TDB2" .
# tdb2:DatasetTDB2  rdfs:subClassOf  ja:RDFDataset .
# tdb2:GraphTDB2    rdfs:subClassOf  ja:Model .

[] rdf:type fuseki:Server ;
   fuseki:services (
     :<%= ENV['EP_NAME'] %>rw
#      :<%= ENV['EP_NAME'] %>ro
   ) .

:<%= ENV['EP_NAME'] %>rw rdf:type fuseki:Service ;
    fuseki:name                       "<%= ENV['EP_NAME'] %>rw" ;     # name of the dataset in the url
    fuseki:serviceQuery               "query" ;    # SPARQL query service
    fuseki:serviceUpdate              "update" ;   # SPARQL update service
    fuseki:serviceUpload              "upload" ;   # Non-SPARQL upload service
    fuseki:serviceReadWriteGraphStore "data" ;     # SPARQL Graph store protocol (read and write)
    fuseki:dataset                    :<%= ENV['EP_NAME'] %>_text_dataset ;
    .

# :<%= ENV['EP_NAME'] %>ro rdf:type fuseki:Service ;
#     fuseki:name                     "<%= ENV['EP_NAME'] %>" ;
#     fuseki:serviceQuery             "query" ;
#     fuseki:serviceReadGraphStore    "data" ;
#     fuseki:dataset           		:<%= ENV['EP_NAME'] %>_text_dataset ;
#     .

# using TDB
:dataset_<%= ENV['EP_NAME'] %> rdf:type      tdb:DatasetTDB ;
     tdb:location "/etc/fuseki/databases/<%= ENV['EP_NAME'] %>" ;
     tdb:unionDefaultGraph true ;
     .

# # try using TDB2
# :dataset_<%= ENV['EP_NAME'] %> rdf:type      tdb2:DatasetTDB2 ;
#      tdb2:location "/etc/fuseki/databases/<%= ENV['EP_NAME'] %>" ;
#      tdb2:unionDefaultGraph true ;
#   .

:<%= ENV['EP_NAME'] %>_text_dataset rdf:type     text:TextDataset ;
    text:dataset   :dataset_<%= ENV['EP_NAME'] %> ;
    text:index     :<%= ENV['EP_NAME'] %>_lucene_index ;
    .

# Text index description
:<%= ENV['EP_NAME'] %>_lucene_index a text:TextIndexLucene ;
    text:directory <file:/etc/fuseki/<%= ENV['LUCENE_INDEX'] %>> ;
    text:storeValues true ;
    text:multilingualSupport true ;
    text:entityMap :<%= ENV['EP_NAME'] %>_entmap ;
    text:defineAnalyzers (
        [ text:addLang "bo" ; 
          text:analyzer [ 
            a text:GenericAnalyzer ;
            text:class "io.bdrc.lucene.bo.TibetanAnalyzer" ;
            text:params (
                [ text:paramName "segmentInWords" ;
                  text:paramType text:TypeBoolean ; 
                  text:paramValue false ]
                [ text:paramName "lemmatize" ;
                  text:paramType text:TypeBoolean ;
                  text:paramValue true ]
                [ text:paramName "filterChars" ;
                  text:paramType text:TypeBoolean ;
                  text:paramValue false ]
                [ text:paramName "fromEwts" ;
                  text:paramType text:TypeBoolean ;
                  text:paramValue false ]
                )
            ] ; 
          ]
        [ text:addLang "bo-x-ewts" ; 
          text:analyzer [ 
            a text:GenericAnalyzer ;
            text:class "io.bdrc.lucene.bo.TibetanAnalyzer" ;
            text:params (
                [ text:paramName "segmentInWords" ;
                  text:paramType text:TypeBoolean ; 
                  text:paramValue false ]
                [ text:paramName "lemmatize" ;
                  text:paramType text:TypeBoolean ;
                  text:paramValue true ]
                [ text:paramName "filterChars" ;
                  text:paramType text:TypeBoolean ;
                  text:paramValue false ]
                [ text:paramName "fromEwts" ;
                  text:paramType text:TypeBoolean ;
                  text:paramValue true ]
                )
            ] ; 
          ]
      ) ;
    .

# Index mappings
:<%= ENV['EP_NAME'] %>_entmap a text:EntityMap ;
    text:entityField      "uri" ;
    text:uidField         "uid" ;
    text:defaultField     "label" ;
    text:langField        "lang" ;
    text:graphField       "graph" ; ## enable graph-specific indexing
    text:map (
         [ text:field "label" ; 
           text:predicate skos:prefLabel ]
         [ text:field "altLabel" ; 
           text:predicate skos:altLabel ; ]
         [ text:field "rdfsLabel" ;
           text:predicate rdfs:label ; ]
         [ text:field "chunkContents" ;
           text:predicate bdo:chunkContents ; ]
         [ text:field "eTextTitle" ;
           text:predicate bdo:eTextTitle ; ]
         [ text:field "logMessage" ;
           text:predicate adm:logMessage ; ]
         [ text:field "noteText" ;
           text:predicate bdo:noteText ; ]
         [ text:field "workAuthorshipStatement" ;
           text:predicate bdo:workAuthorshipStatement ; ]
         [ text:field "workColophon" ; 
           text:predicate bdo:workColophon ; ]
         [ text:field "workEditionStatement" ;
           text:predicate bdo:workEditionStatement ; ]
         [ text:field "workPublisherLocation" ;
           text:predicate bdo:workPublisherLocation ; ]
         [ text:field "workPublisherName" ;
           text:predicate bdo:workPublisherName ; ]
         [ text:field "workSeriesName" ;
           text:predicate bdo:workSeriesName ; ]
         ) ;
    .
    